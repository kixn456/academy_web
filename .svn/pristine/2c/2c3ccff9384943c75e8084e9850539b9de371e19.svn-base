/**
 * @ajax quest by server;
 */
import Storage from  '../common/storeage';
export function getRootPath()
{
	//获取当前网址，如： http://localhost:8083/uimcardprj/share/meun.jsp
    let curWwwPath = window.document.location.href;
    //获取主机地址之后的目录，如： uimcardprj/share/meun.jsp
    let pathName = window.document.location.pathname;
    let pos = curWwwPath.indexOf(pathName);
    //获取主机地址，如： http://localhost:8083
    let localhostPaht = curWwwPath.substring(0, pos);
    //获取带"/"的项目名，如：/uimcardprj
    let projectName = pathName.substring(0, pathName.substr(1).indexOf('/') + 1);
    //return (localhostPaht + projectName);
	//return "http://127.0.0.1:9088"
	return "http://www.chunzeacademy.com:8080/";//发布 8081用户中心（注册登录）

	//imgserver
	//images.chunzeacademy.com
	//upload
	//files.chunzeacademy.com
}

export function ajaxPost(serverUrl,postData,funSuccess,funError,async=true)
{

	$.ajax({
	    url:serverUrl,
	    type:'POST', //GET
	    async:async,    //或false,是否异步
	    data:JSON.stringify(postData),
	    contentType:'application/json;charset=UTF-8',
	    timeout:100000,    //超时时间
	    dataType:'json',    //返回的数据格式：json/xml/html/script/jsonp/text
	    beforeSend:function(xhr){
            var userInfo=Storage.get("userInfo");
            if(userInfo!=null){
                var token = userInfo.token;
                if(token)
                {
                    xhr.setRequestHeader('token', token);
                }
			}
	    },
	    success:function(data,textStatus,jqXHR){
	    	funSuccess(data,textStatus);
	    },
	    error:function(xhr,textStatus){
            funError(xhr,textStatus);
	    }
	});
}

export function ajaxGet(serverUrl,postData,funSuccess,funError,async=true)
{


	$.ajax({
	    url:serverUrl,
	    type:'GET', //GET
	    async:async,    //或false,是否异步
	    data:postData,
	    timeout:10000,    //超时时间
	    dataType:'json',    //返回的数据格式：json/xml/html/script/jsonp/text
	    success:function(data,textStatus){
	    	funSuccess(data,textStatus);
	    },
	    error:function(xhr,textStatus){
	    	console.log(textStatus);
	    	funError(xhr,textStatus);
	    }
	});
}

function ajax(options){
	let option={
		url:options.url,
		data:options.data||null,
		type:options.type||'POST',
        dataType:'json',
        async:options.async,
        timeout:options.timeout||10000,
		hasCache:options.hasCache||true,
		ajaxSuccess:options.success,
		ajaxError:options.error||empty
	};
    let xhr;
    if (window.XMLHttpRequest){
        xhr=new XMLHttpRequest();
    }else{
        xhr=new ActiveXObject("Microsoft.XMLHTTP");
    }
    xhr.onreadystatechange = function(){
        if (xhr.readyState == 4) {
            clearTimeout(abortTimeout)
            var result, error = false
            if ((xhr.status >= 200 && xhr.status < 300) || xhr.status == 304 || (xhr.status == 0 && protocol == 'file:')) {
                dataType = dataType || mimeToDataType(xhr.getResponseHeader('content-type'))
                result = xhr.responseText;
                try {
                    if (dataType == 'script')    (1,eval)(result)
                    else if (dataType == 'xml')  result = xhr.responseXML
                    else if (dataType == 'json') result = blankRE.test(result) ? null : JSON.parse(result)
                } catch (e) {
                	error = e
                }
                if (error) {
                    option.ajaxError(error, 'parsererror', xhr, option)
				}else{
                    option.ajaxSuccess(result, xhr, option);
				}
            } else {
                option.ajaxError(null, 'error', xhr, option)
            }
        }
    }

    xhr.open(options.type, options.url, options.async);
    var abortTimeout=null;
    for (name in options.headers) xhr.setRequestHeader(name, options.headers[name]);
    if (option.timeout > 0) abortTimeout = setTimeout(function(){
        xhr.onreadystatechange = empty;
        xhr.abort()
        ajaxError(null, 'timeout', xhr, options)
    }, options.timeout)
    xhr.send(options)
}
function empty() {}