/**
 * Created by Administrator on 2017/9/29.
 */

import React, {Component} from 'react';
/*import {Grid,ROW,Col,Tabs,Tab,Modal,Button,ButtonGroup,FormGroup,Form,FormControl,Radio,ButtonToolbar,DropdownButton,MenuItem,SplitButton} from "react-bootstrap";*/

import { Form, Input, Tooltip, Icon, Cascader, Select, Row, Col, Checkbox,Button,Radio, Modal} from 'antd';
import { DatePicker } from 'antd';
import 'antd/dist/antd.css';
import {isEmptyObject} from "../../public/commom/commom";
import {UploadImg} from '../../public/uploaImg'
import moment from 'moment';
import '../../../css/timeline.css';
// 推荐在入口文件全局设置 locale
import 'moment/locale/zh-cn';
moment.locale('zh-cn');
import * as I18N from '../../i18n/i18n_teachCenter';
import  * as ClassData from '../../testData/classData';
import * as UserCenterServer from '../../server/userCenterServer';
import Storage from  '../../common/storeage';
import {CoustomInput} from '../../public/newInput';
const FormItem = Form.Item;
const Option = Select.Option;
const ClassList=ClassData.ClassList;
const RadioGroup = Radio.Group;

const IdList=[
"身份证",
"护照",
"驾驶证"
]



export default class ModifyUserInfo extends Component {
    constructor(props) {
        super(props);
        this.state={
            isRefershing:false
        }
        this.userInfo=Object.assign({},this.props.userInfo);
    }

    componentDidMount(){

        this.initUserInfo();
    }
    componentWillReceiveProps(nextProps){

        if(nextProps.userInfo!=this.state.userInfo){
            delete nextProps.userInfo.loginUser;
            this.userInfo=Object.assign({},nextProps.userInfo);
            this.initUserInfo();
            //this.refereshRender();

        }
    }

    initUserInfo(){

        let userInfo=this.userInfo;
        console.log(userInfo);
        if(userInfo.sex<0 || !userInfo.sex){
            userInfo.sex=2;
        }

        //0　身份证，1，护照，2驾照
        if( parseInt(userInfo.idType)<0){
            userInfo.idType='0';
        }
        if(userInfo.birthday=="" ||userInfo.birthday==null){
            userInfo.birthday="1990-1-1";
        }
        this.refereshRender();
    }
    hideModal(){
        this.props.closeHandle();
    }
    changeHandle(e){
        //console.log(e.target.name+"==="+e.target.value);
        let targetName=e.target.name;
        let targetValue=e.target.value;
        this.userInfo[targetName]=targetValue;
        this.refereshRender();

    }

    refereshRender(){
        let isRefershing=this.state.isRefershing;
        this.setState({
            isRefershing:!isRefershing
        })
    }
    changeSex(e){

        let userInfo=this.userInfo;
        userInfo.sex=e.target.value;
        this.refereshRender();
    }
    chooseDate(date, dateString){

        this.userInfo.birthday=dateString;
        this.refereshRender();

    }
    modifyUserInfoSubmit(){

        let phoneNo="";
        let userInfo=Storage.get("userInfo");
        let _self=this;
        let modifyUserInfo=Object.assign({},_self.userInfo);
        let newUserInfo=Object.assign(userInfo,modifyUserInfo);
        //modifyUserInfo.birthday+=" 00:00:01";
        //modifyUserInfo.idType=parseInt(modifyUserInfo.idType);
        //modifyUserInfo.idNo=parseInt(modifyUserInfo.idNo);
       // delete modifyUserInfo.birthday;
        UserCenterServer.modifyUserInfo(userInfo.loginId,modifyUserInfo,function(data){
            console.log(data);
            _self.hideModal();
            Storage.set("userInfo",newUserInfo);
            _self.props.submitHandle(modifyUserInfo);
        },function (e) {
            console.log(e);
        })

    }
    chooseSelectIdType(target){
        let name=target.name;
        let value=target.value;
        this.userInfo[name]=value;
        this.refereshRender();
    }


    uploadCallBack(photoPath){
        this.userInfo["avatar"]=photoPath;
       // this.urseInfo.avatar=photoPath;
        //console.log(photoPath);
        this.refereshRender()
    }

    render() {
        let defaultTime=new Date();
        let userInfo=this.userInfo;
        return (
            <Modal
                visible={this.props.show}
                onCancel={this.hideModal.bind(this)}
               // onOk={this.hideModal.bind(this)}
                onOk={this.modifyUserInfoSubmit.bind(this)}
                title="完善用户信息"
            >
                <Col span={24} >
                    <Col span={24} className="lineBox">
                        <Col span={4} offset={3}  className="lineBox_lable">上传头像</Col>
                        <Col span={10}>
                            <div style={{width:'100px',height:'100px',border:'1px solid #ccc',textAlign:'center'}}>
                                <UploadImg photoPath={userInfo.avatar} uploadCallBack={(imgPath)=>this.uploadCallBack(imgPath)} />
                            </div>

                        </Col>
                    </Col>
                    <Col  span={24} className="lineBox">
                            <Col  span={4} offset={3}  className="lineBox_lable">呢称</Col>
                            <Col  span={14} >
                                <Input size={'large'} defaultValue={userInfo.displayName} name='displayName'   placeholder={"请填写一个呢称"}  onChange={(e)=>this.changeHandle(e)} />
                            </Col>
                    </Col>

                <Col span={24} className="lineBox">
                    <Col  span={4}offset={3} className="lineBox_lable">性别</Col>
                    <Col  span={14} >
                        <RadioGroup size={'large'} name="sex"
                                    defaultValue={1}
                                    value={String(userInfo.sex)}
                                    onChange={this.changeSex.bind(this)}>
                            <Radio value={String(0)}>男</Radio>
                            <Radio value={'1'}>女</Radio>
                            <Radio value={'2'}>保密</Radio>
                        </RadioGroup>
                    </Col>
                </Col>
                    <Col span={24} className="lineBox">
                        <Col  span={4} offset={3} className="lineBox_lable">生日</Col>
                        <Col  span={14}>
                            <DatePicker defaultValue={moment(userInfo.birthday, 'YYYY-MM-DD')}  onChange={this.chooseDate.bind(this)}/>
                        </Col>
                    </Col>
                    <Col span={24} className="lineBox">
                        <Col  span={4} offset={3} className="lineBox_lable">Email</Col>
                        <Col  span={14}>
                            <Input size={'large'} name='email'   defaultValue={userInfo.email}   placeholder={"邮箱地址"}  onChange={(e)=>this.changeHandle(e)} />
                        </Col>
                    </Col>
                    <Col span={24} className="lineBox">
                        <Col  span={4}  offset={3} className="lineBox_lable">证件类型</Col>
                        <Col  span={14}>
                            <Select
                                name="idType" size={'large'}
                                    defaultValue={(parseInt(userInfo.idType)>=0)?String(userInfo.idType):"0"}
                                    style={{width:"49%",float:'left',marginLeft:'4px'}} onChange={(value)=>this.chooseSelectIdType({"name":'idType',"value":value})}>
                                {
                                    IdList.map(function(item,index){
                                        return  <Option value={String(index)} key={index}>{item}</Option>
                                    })
                                }
                            </Select>
                        </Col>
                    </Col>
                    <Col span={24} className="lineBox">
                        <Col  span={4}   offset={3}className="lineBox_lable">证件号码</Col>
                        <Col  span={14}>
                            <Input size={'large'} name='idNo'   defaultValue={userInfo.idNo}   placeholder={"请输入您的证件号码"}  onChange={(e)=>this.changeHandle(e)} />
                        </Col>
                    </Col>
                    <Col span={24} className="lineBox">
                        <Col  span={4}  offset={3} className="lineBox_lable">联系地址</Col>
                        <Col  span={14}>
                            <Input size={'large'}   defaultValue={userInfo.businessAddress}  name='businessAddress' placeholder={"请输入您的联系地址"}  onChange={(e)=>this.changeHandle(e)} />
                        </Col>
                    </Col>

                </Col>
            </Modal>
        )
    }

}

