
/**
 * Created by Administrator on 2017/9/30.
 *@description
 *@author
 *@out
 */

import React,{Component} from 'react';
import  ReactDOM from 'react-dom';
import {Grid,Row,Col, Modal} from "react-bootstrap";
import * as VideoServer from '../server/videoPlayerServer';
import * as Commom from '../public/commom/commom';
import * as CourseServer from '../server/courseCenterServer';
import Storage from '../common/storeage';
import AskQuestion from '../courseCenter/evaluation/askQuestion'
import VideoEvaluation from '../courseCenter/evaluation/videoEvaluation';
import RewardEvaluation from '../courseCenter/evaluation/reward';
const MenuList=["目录","提问","评价","打赏"];
let  newPlayer= null;
export default class MainFrame extends Component{
    constructor(props){
        super(props);
        this.state={
            isRender:false,
            courseInfo:null,
            currentIndex:0
        }
        this.screenHeight=window.screen.availHeight-95;
        this.menuWidth=0;
        this.showFlag=false;
        this.activeTag=null;
        this.showModal=false;
        this.loginFlag=Storage.get("loginFlag");
        this.userInfo=Storage.get("userInfo");
        this.VideoId=Storage.get("videoId");

    }
    componentDidMount(){
        console.log()
        let request=Commom.GetRequest();
        let videoInfo=this.state;
        if(this.loginFlag)
        {
            if(request.videoId)
            {
                let vodPlayInfo={
                    videoId:request.videoId
                }
                this.initPlayVideo(vodPlayInfo);
                //如果有章节ＩＤ的情况下，应该优化调用课时ＩＤ
            }
            this.initCourseList(request.courseId);
        }

    }

 //初始化播放列表
    initCourseList(courseId){
        let _self=this;

        CourseServer.getCourseAllClassByAjax(courseId,function(code,data){
            _self.setState({
                courseInfo:data
            });
            document.title="视频播放";
            let currentIndex=_self.state.currentIndex;
            if(!_self.VideoId ){
                _self.channelExhange(data[0].courseList[currentIndex].videoId);
            }else{
                _self.channelExhange(_self.VideoId);
            }
        },function(e){
            console.log("error");
        });
    }
    //初始化播放器
    initPlayer(videoInfo){
        if(newPlayer) {
            newPlayer.dispose();
        }
        document.getElementById("c_player").innerHTML="";
        newPlayer = new Aliplayer({
            id: "c_player",
            autoplay:true,
            isLive:false,//是否直播
            playsinline:true,
             useH5Prism:false,
             useFlashPrism:false,
            width:"100%",
            height:this.screenHeight+"px",
            vid : videoInfo.vid,//媒体转码服务的媒体Id
            cover:videoInfo.cover,//入场广告
            playauth : videoInfo.playauth
            //source:videoInfo.videoUrl,
        })

        let _self=this;
        //播放结束时调用
        newPlayer.on("ended",function(){
            //document.getElementById("c_player").innerHTML="";]
            let currentIndex=_self.state.currentIndex;
            currentIndex=currentIndex++;
            _self.initPlayVideo({
                "videoId":_self.data[0].courseList[currentIndex].videoId
            });
        })
    }

    initPlayVideo(vodPlayInfo) {
        let _self=this;
        VideoServer.ajaxReqPlayVideo(vodPlayInfo,function(retCode,data){
            if(retCode==0)
            {
              let payInfo={
                    vid:data.videoId,
                    playauth:data.playAuth
                }
               _self.initPlayer(payInfo);
            }else{
                alert("get playAuth error");
            }
        });
    }

    channelExhange(videoId,videoUrl,courseIndex){
        let vodPlayInfo={
            "videoId":videoId
        };
        Storage.set("videoId",videoId);
        this.setState({
            currentIndex:courseIndex
        })
        this.initPlayVideo(vodPlayInfo);
    }
    changeMenuItem(index){
        let _self=this;
        let showFlag=this.showFlag;
        this.activeTag=index;
        if(index!=0){
            this.showModal=true;
            this.refreshRender();
            return;
        }



        if(showFlag){
            this.showFlag=false;
            this.timer=setInterval(function(){
                if(_self.menuWidth>0){
                    _self.menuWidth-=3
                }else{
                    clearInterval(_self.timer);
                }
                _self.refreshRender();
            },2)
        }else{
                this.showFlag=true;
                this.timer=setInterval(function(){
                    if(_self.menuWidth<200){
                        _self.menuWidth+=3;
                    }else{
                        clearInterval(_self.timer);
                    }
                    _self.refreshRender();
                },2)

        }
    }
    //提交提问
    submitCallBack(text){
        console.log(text);
        this.hideModal();

    }
    hideModal(){
        this.showModal=false;
        this.refreshRender();
    }

    refreshRender(){
        let isRender=this.state.isRender;
        this.setState({
            isRender:!isRender
        })
    }
    render(){
        let courseInfo=this.state.courseInfo;
        let _self=this;
        let activeTag=this.activeTag;
        return (
            <div style={{padding:'0px',overflow:'hidden',boxSizing:'border-box'}}>
                <Col sm={12} style={{position:'relative',padding:0}}>
                    <div id='c_player' className='prism-player' ></div>

                    <ul className="videoList" style={{right:this.menuWidth+"px",top:'40%',padding:0,position:'absolute'}}>
                        {
                            MenuList.map((item,index)=>{
                                    let classColor=(index==activeTag)?"active":'';
                                return   <li className={classColor} key={"menuList_"+index} onClick={()=>this.changeMenuItem(index)}>{item}</li>
                            })
                        }
                    </ul>
                    <div　style={{right:this.menuWidth-200+"px",top:0,padding:0,position:'absolute',overflow:'hidden',width:"200px",height:'100%',background:'rgba(0,0,0,.5)'}}>
                        {
                            (this.showFlag)
                            ?
                                <Col>
                                    {
                                        (courseInfo!=null)
                                            ?

                                            courseInfo.map(function(item,index){
                                                return (<div style={{color:'white'}} key={index}>
                                                    <div style={{background:'rgba(255,255,255,.8)',lineHeight:'40px'}}>第{index+1}章</div>
                                                    <ul style={{color:'white',padding:'0',margin:0,textAlign:'left',listStyle:'none'}}>
                                                        {
                                                            item.courseList.map(function(courseItem,courseIndex){

                                                                let color=(_self.state.currentIndex==courseIndex)?"white":'white';
                                                                let backColor=(_self.state.currentIndex==courseIndex)?"rgba(0,0,0,.8)":'none';
                                                                return (
                                                                    <li style={{margin:0,padding:'5px 10px',background:backColor,fontSize:'12px',borderBottom:'1px solid #ccc',textAlign:'left',listStyle:'none',color:color}}
                                                                        key={courseIndex}
                                                                        onClick={()=>_self.channelExhange(courseItem.videoId,courseItem.videoUrl,courseIndex)}>
                                                                        第{courseIndex+1}节　{courseItem.classTitle}
                                                                    </li>
                                                                )
                                                            })
                                                        }
                                                    </ul>

                                                </div>)
                                            })
                                            :
                                            null
                                    }
                                </Col>
                                :
                                null
                        }

                        <Modal
                            show={this.showModal}
                            onHide={this.hideModal.bind(this)}
                        >
                            <Modal.Header closeButton>
                                <Modal.Title> {MenuList[activeTag]}</Modal.Title>
                            </Modal.Header>

                            <Modal.Body>
                                {
                                   (activeTag==1)
                                    ?
                                    <AskQuestion submitCallBack={(text)=>this.submitCallBack(text)}/>
                                   :
                                       (activeTag==2)
                                           ?
                                    <VideoEvaluation submitCallBack={()=>this.submitCallBack()}/>
                                           :
                                           <RewardEvaluation submitCallBack={()=>this.submitCallBack()}/>
                                }
                            </Modal.Body>
                        </Modal>
                    </div>



                </Col>

            </div>
        )
    }
}

ReactDOM.render(
    <MainFrame/>,
    document.getElementById('mainFrame')
);

